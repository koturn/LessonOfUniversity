+------------------------------------------------------------+
| プログラムの仕様書                                         |
|   1. プログラムの使い方                                    |
|   2. プログラムの内部仕様                                  |
|   3. コンパイル                                            |
|   4. コーディング                                          |
|   5. その他                                                |
+------------------------------------------------------------+


[ 1. プログラムの使い方 ]
このプログラムは、コマンドライン引数を必要とする。
  $ group03.exe [options] (読み込むファイル名)
もしくは
  $ group03.exe [options] -f (読み込むファイル名) [options]
という風に、プログラムを起動すること。
[-options]は省略可能である。

コマンドライン引数が指定されなかった場合は、使い方を表示して終了する。


例 :
  $ group03.exe enshu3.txt
    -> enshu3.txtを読み込み、enshu3-out.txtを出力する
  $ group03.exe -f enshu3.txt -m 60
    -> enshu3.txtを読み込み、60行ごとに平均を取った結果をenshu3-out.txtを出力する
  $ group03.exe -m 120 -f enshu3.txt -o out.txt
    -> enshu3.txtを読み込み、120行ごとに平均を取った結果をout.txtを出力する


このプログラムで指定できるオプションには以下のようなものがある。
  -f : 読み込むファイル名を指定する。
  -h : プログラムの使い方を表示する。
  -m : ダウンサンプリングの周期を指定する。
       値として指定するのは、入力csvファイルのいくつの行数で平均を取るか、
       である。
       このオプションが指定されない場合、デフォルトの値として、30をダウン
       サンプリングに用いる。これは、30行ごとに平均値を算出することに相当する。
       もし、"-m 60"と指定されたなら、60行ごとに平均値を算出することに相当する。
       なお、0以下の値や、int型の最大値以上の値を指定すると、エラーメッセージ
       を出力して、プログラムを終了する。
       入力ファイルの行数より大きな値を指定した場合は、全ての行の平均を取っ
       て、結果を出力する。
  -o : 出力ファイル名を指定する。

同じオプションが複数回指定された場合は、後のオプションを優先する。




[ 2. プログラムの内部仕様 ]
csvファイルの読み込みに用いる配列は、あらかじめ8192行分の容量が確保されている
ものを用いる。
(csvファイルの有効データ数に動的に合わせてもよかったが、その場合はファイルを
2passで処理しなければならないので、実行効率を考えて止めておいた。)

csvファイル内に無効な行
  例えば、
    aa 1092.459 bbb 234.5 ccc.ddd xxxxx yyyyy zzzzz 0.00 21692.1
が混入していた場合、そのデータを無視し、
何行目にそのデータがあるかを出力する。
これにより、csvファイル中の有効データのみを用いることができる。

csvファイルの有効データ数が、ダウンサンプリングでまとめるデータ数で割り切れな
い場合、
つまり、ファイルの終端あたりで、平均を取るのにデータ数が中途半端である場合、
残ったデータ数だけで平均値を算出し、計算するようにしている。


なお、ダウンサンプリングデータを収める配列と、面積や重心などの特徴を収める配列
は、mallocにより動的確保を行うものとした。(これは、csvファイルを1度読み込んで
おり、再度ファイルを読まなくても、データ数が決定できる状態であるため。)

三角形の面積を求めるのに、ヘロンの公式を用いている。
これは、"3名の距離の総和の値"を求めるために、すでにそれぞれの距離を計算してお
り、ヘロンの公式の計算量が少ないためである。




[ 3. コンパイル ]
data_handler.cで、<math.h>のsqrt()関数を用いているので、libm.aとリンクするように
指定することが必要である。すなわち、
  $ gcc [source-file or object-file] -lm -o [destination-file]
とすることが必要である。

インライン展開マクロを組み込んでおいたので、gccに以下のマクロを与えると、
特定の関数がインライン展開される。これは、関数のコール時間の削減のためである。
  OPTIMIZE : 最適化コードを出力する。
             これは、C++ならインライン関数で記述すべき関数をマクロに置き換え、
             インライン化を指示するためのものである。
             (gccならインライン関数の仕様ができるが、Visual C++のコンパイラで
             は用いることができないので、このような仕組みを作った)
"gccにマクロを与える"には、-Dオプションを用いて、
  $ gcc -DOPTIMIZE [source-file] -o [destination-file]
と記述すればよい。

このマクロが与えられなかった場合、通常の関数を用いたコードを生成する。

なお、main.cは<getopt.h>のgetopt()関数を用いているが、
<getopt.h>が無い環境(例えば、Visual C++)でコンパイルする際は、
libディレクトリに、
  getopt.c
  getopt.h
があるので、それを用いること。




[ 4. コーディング ]
ソースコードは以下のような形式で記述した。
  インデント           : 半角スペース
  インデントカラム数   : 2
  インクルードガード   : #pragma
ソースコードの見栄えとしては、Javaのインデントカラム数を2にしたものとなっている。
気に食わなければ、indentコマンドを使うなどして、適宜変更して構わない。

なお、インクルードガードには、
  #pragma once
を用いている。これは、近年のコンパイラで#pragma onceに対応していないものはないと
考えたためである。




[ 5. その他 ]
プログラムの配布ライセンス形態はGPLとしておく。
これに関しての質問がある場合は、プログラム全体を担当した
  buk1097@mail4.doshisha.ac.jp
まで連絡すること。

また、doxygen形式のコメントをつけるように徹底したので、doxygenによるドキュメント
生成は自由に行って構わない。
